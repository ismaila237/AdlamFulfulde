package com.bekisma.adlamfulfulde.screens

import android.content.Context
import android.content.res.Configuration
import android.media.MediaPlayer
import android.view.HapticFeedbackConstants
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons // Importation n√©cessaire
import androidx.compose.material.icons.filled.GraphicEq // Importation n√©cessaire
import androidx.compose.material.icons.filled.PlayArrow // Importation n√©cessaire
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.bekisma.adlamfulfulde.R
import com.bekisma.adlamfulfulde.ads.BannerAdView // Assurez-vous que cette importation est correcte
import com.bekisma.adlamfulfulde.ui.theme.AdlamFulfuldeTheme // Assurez-vous que cette importation est correcte
import java.util.Locale

// ... (Garder les mappings et autres variables globales inchang√©s)
val adlamToLatinMap = mapOf(
    "û§Ä" to "A", "û§Å" to "DA", "û§Ç" to "LA", "û§É" to "MA", "û§Ñ" to "BA", "û§Ö" to "SA", "û§Ü" to "PA",
    "û§á" to "∆ÅA", "û§à" to "RA", "û§â" to "E", "û§ä" to "FA", "û§ã" to "I", "û§å" to "O", "û§ç" to "∆äA", "û§é" to "∆≥A",
    "û§è" to "WA", "û§ê" to "NA", "û§ë" to "KA", "û§í" to "YA", "û§ì" to "U", "û§î" to "JA", "û§ï" to "CA", "û§ñ" to "HA",
    "û§ó" to "QA", "û§ò" to "GA", "û§ô" to "√ëA", "û§ö" to "TA", "û§õ" to "NHA",
    "û§êû§Å" to "NDA", "û§êû§Ñ" to "MBA", "û§êû§î" to "NJA", "û§êû§ò" to "NGA"
)
val adlamAlphabet = listOf(
    "û§Ä", "û§Å", "û§Ç", "û§É", "û§Ñ", "û§Ö", "û§Ü",
    "û§á", "û§à", "û§â", "û§ä", "û§ã", "û§å", "û§ç", "û§é",
    "û§è", "û§ê", "û§ë", "û§í", "û§ì", "û§î", "û§ï", "û§ñ",
    "û§ó", "û§ò", "û§ô", "û§ö", "û§õ",
    "û§êû§Å", "û§êû§Ñ", "û§êû§î", "û§êû§ò"
)
val exampleWordsMap = mapOf(
    "û§Ä" to listOf("û§¢û§≤û•ãû§£û§¢û§§"), // Example word for A
    "û§Å" to listOf("û§Åû§´û§¶û•Üû§Æ"), // Example word for DA
    "û§Ç" to listOf("û§Çû§´û§±û§™û§µ"), // Example word for LA
    "û§É" to listOf("û§Éû§¢û§±û§≤û§£û§´"), // Example word for MA
    "û§Ñ" to listOf("û§Ñû§¢û•Ñû§§û§≠"), // Example word for BA
    "û§Ö" to listOf("û§Öû§µû•Öû§£û§µ"), // Example word for SA
    "û§Ü" to listOf("û§Üû§µû§∑û•Üû§µ"), // Example word for PA
    "û§á" to listOf("û§áû§¢û•Ñû§±û§Æ"), // Example word for ∆ÅA
    "û§à" to listOf("û§àû§´û§±û§©û§´"), // Example word for RA
    "û§â" to listOf("û§âû§∫û•Üû§Æû§§"), // Example word for E
    "û§ä" to listOf("û§äû§Æû§±û§™û§µ"), // Example word for FA
    "û§ã" to listOf("û§ãû§≤û•ãû§£û§´•Ö±û§™û§≠"), // Example word for I
    "û§å" to listOf("û§å•Ö±û§§û§£û§≠"), // Example word for O
    "û§ç" to listOf("û§çû§¢û§Øû§≠"), // Example word for ∆äA
    "û§é" to listOf("û§éû§¢û§•û§Æ•Ö±û§±û§§"), // Example word for ∆≥A
    "û§è" to listOf("û§èû§¢•Ñ≤û§≤û§£û§µ"), // Example word for WA
    "û§ê" to listOf("û§êû§¢û§∫û•Üû§´"), // Example word for NA
    "û§ë" to listOf("û§ëû§µû§™û§Æû§§‚Åè"), // Example word for KA
    "û§í" to listOf("û§íû§¢•Ñ≤û§™û§´"), // Example word for YA
    "û§ì" to listOf("û§ìû§≤û§Æû§™û§£û§µ"), // Example word for U
    "û§î" to listOf("û§îû§¢û§≤û•ãû§∫û§Æ"), // Example word for JA
    "û§ï" to listOf("û§ïû§≠û§™û§∫û§µ"), // Example word for CA
    "û§ñ" to listOf("û§ñû§Æû§™û§£û§´"), // Example word for HA
    "û§ó" to listOf("û§óû§Æû§¥û§≠•Ö±û§™"), // Example word for QA
    "û§ò" to listOf("û§òû§Æû§™û§≥û§Æ"), // Example word for GA
    "û§ô" to listOf("û§ôû§¢•Ñ≤û§≥û§µ"), // Example word for √ëA
    "û§ö" to listOf("û§öû§¢û§ºû§≠"), // Example word for TA
    "û§õ" to listOf("û§õû§¢û§™û§Æû§§"), // Example word for NHA
    "û§êû§Å" to listOf("û§êû§£û§¢•Ñ≤û§•û§≤û§£û§≠"), // Example word for NDA
    "û§êû§Ñ" to listOf("û§êû§Ñû§´•Ö±û§±û§¢"), // Example word for MBA
    "û§êû§î" to listOf("û§êû§îû§µû§•û§™û§≠"), // Example word for NJA
    "û§êû§ò" to listOf("û§êû§∫û§¢•Ñ≤û§≤û§£û§≠")  // Example word for NGA
)
val adlamAudioMap = mapOf(
    "û§Ä" to R.raw.adlam1_1, "û§Å" to R.raw.adlam2_1, "û§Ç" to R.raw.adlam3_1,
    "û§É" to R.raw.adlam4_1, "û§Ñ" to R.raw.adlam5_1, "û§Ö" to R.raw.adlam6_1,
    "û§Ü" to R.raw.adlam7_1, "û§á" to R.raw.adlam8_1, "û§à" to R.raw.adlam9_1,
    "û§â" to R.raw.adlam10_1, "û§ä" to R.raw.adlam11_1, "û§ã" to R.raw.adlam12_1,
    "û§å" to R.raw.adlam13_1, "û§ç" to R.raw.adlam14_1, "û§é" to R.raw.adlam15_1,
    "û§è" to R.raw.adlam16_1, "û§ê" to R.raw.adlam17_1, "û§ë" to R.raw.adlam18_1,
    "û§í" to R.raw.adlam19_1, "û§ì" to R.raw.adlam20_1, "û§î" to R.raw.adlam21_1,
    "û§ï" to R.raw.adlam22_1, "û§ñ" to R.raw.adlam23_1, "û§ó" to R.raw.adlam24_1,
    "û§ò" to R.raw.adlam25_1, "û§ô" to R.raw.adlam26_1, "û§ö" to R.raw.adlam27_1,
    "û§õ" to R.raw.adlam28_1,
    // Ces sons pourraient √™tre g√©r√©s diff√©remment ou avoir leurs propres enregistrements
    "û§êû§Å" to R.raw.son_nul,
    "û§êû§Ñ" to R.raw.son_nul,
    "û§êû§î" to R.raw.son_nul,
    "û§êû§ò" to R.raw.son_nul
)

// --- Nouvelle Map pour l'audio des mots d'exemple ---
// IMPORTANT: Les entr√©es R.raw.son_nul sont des placeholders.
// TODO: Remplacer R.raw.son_nul par les identifiants des vrais fichiers audio (.mp3/.wav)
//       pour chaque mot d'exemple dans res/raw/ lors d'une prochaine mise √† jour.
val exampleWordAudioMap = mapOf(
    "û§¢û§≤û•ãû§£û§¢û§§" to R.raw.son_nul, // Example word: andal
    "û§Åû§´û§¶û•Üû§Æ" to R.raw.son_nul, // Example word: Debbo
    "û§Çû§´û§±û§™û§µ" to R.raw.son_nul, // Example word: Lewruru
    "û§Éû§¢û§±û§≤û§£û§´" to R.raw.son_nul, // Example word: Mawnde
    "û§Ñû§¢û•Ñû§§û§≠" to R.raw.son_nul, // Example word: Baali
    "û§Öû§µû•Öû§£û§µ" to R.raw.son_nul, // Example word: Suudu
    "û§Üû§µû§∑û•Üû§µ" to R.raw.son_nul, // Example word: Puccu
    "û§áû§¢û•Ñû§±û§Æ" to R.raw.son_nul, // Example word: Bbaawwo
    "û§àû§´û§±û§©û§´" to R.raw.son_nul, // Example word: Rewbbe
    "û§â" to R.raw.son_nul, // Example word: Eggol
    "û§äû§Æû§±û§™û§µ" to R.raw.son_nul, // Example word: Fowru
    "û§ãû§≤û•ãû§£û§´•Ö±û§™û§≠" to R.raw.son_nul, // Example word: Indeeri
    "û§å•Ö±û§§û§£û§≠" to R.raw.son_nul, // Example word: Ooldi
    "û§çû§¢û§Øû§≠" to R.raw.son_nul, // Example word: Dadhi
    "û§éû§¢û§•û§Æ•Ö±û§±û§§" to R.raw.son_nul, // Example word: Yyamoo≈µl
    "û§èû§¢•Ñ≤û§≤û§£û§µ" to R.raw.son_nul, // Example word: Waandu
    "û§êû§¢û§∫û•Üû§´" to R.raw.son_nul, // Example word: Nagge
    "û§ëû§µû§™û§Æû§§‚Åè" to R.raw.son_nul, // Example word: Kurol
    "û§íû§¢•Ñ≤û§™û§´" to R.raw.son_nul, // Example word: Yyaare
    "û§ìû§≤û§Æû§™û§£û§µ" to R.raw.son_nul, // Example word: Unordu
    "û§îû§¢û§≤û•ãû§∫û§Æ" to R.raw.son_nul, // Example word: Jaango
    "û§ïû§≠û§™û§∫û§µ" to R.raw.son_nul, // Example word: Cirgu
    "û§ñû§Æû§™û§£û§´" to R.raw.son_nul, // Example word: Hornde
    "û§óû§Æû§¥û§≠•Ö±û§™" to R.raw.son_nul, // Example word: Qoyiyr
    "û§òû§Æû§™û§≥û§Æ" to R.raw.son_nul, // Example word: Gorko
    "û§ôû§¢•Ñ≤û§≥û§µ" to R.raw.son_nul, // Example word: Nnyaaku
    "û§öû§¢§º≠" to R.raw.son_nul, // Example word: Tati (Note: This was "û§öû§¢û§ºû§≠", corrected typo here)
    "û§õû§¢û§™û§Æû§§" to R.raw.son_nul, // Example word: Nharol
    "û§êû§£û§¢•Ñ≤û§•û§≤û§£û§≠" to R.raw.son_nul, // Example word: Ndaamndi
    "û§êû§Ñû§´•Ö±û§±û§¢" to R.raw.son_nul, // Example word: Nbeewa
    "û§êû§îû§µû§•û§™û§≠" to R.raw.son_nul, // Example word: Nujumri
    "û§êû§òû§¢•Ñ≤û§≤û§£û§≠" to R.raw.son_nul // Example word: Ngayndi
    // Ajoutez d'autres mots d'exemple et leurs ressources audio ici (initialement avec son_nul)
)


// --- MediaPlayer Singleton am√©lior√© avec callback ---
object MediaPlayerSingleton {
    private var mediaPlayer: MediaPlayer? = null
    private var completionListener: (() -> Unit)? = null

    fun playSound(context: Context, soundResourceId: Int, onComplete: () -> Unit = {}) {
        // Lib√©rer l'ancien lecteur avant de cr√©er un nouveau
        releasePlayer()
        completionListener = onComplete // Stocker le callback

        mediaPlayer = try {
            // V√©rifier si la ressource existe et est valide
            if (soundResourceId == 0) { // R.raw.son_nul pourrait √™tre 0 si non d√©fini ou si un autre probl√®me survient.
                // Une meilleure v√©rification pourrait √™tre n√©cessaire si son_nul est un fichier vide mais valide.
                // Pour l'instant, on suppose son_nul est trait√© comme "pas de son".
                null // Traiter comme un √©chec si c'est son_nul
            } else {
                MediaPlayer.create(context, soundResourceId)?.apply {
                    setOnCompletionListener { mp ->
                        mp.release()
                        completionListener?.invoke() // Appeler le callback de fin
                        completionListener = null
                        mediaPlayer = null // S'assurer que la r√©f√©rence est nulle apr√®s lib√©ration
                    }
                    start()
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
            null // G√©rer l'√©chec de cr√©ation
        }

        // Si la cr√©ation a √©chou√© (y compris si c'√©tait son_nul), appeler imm√©diatement le callback
        if (mediaPlayer == null) {
            completionListener?.invoke()
            completionListener = null
        }
    }

    fun stopSound() {
        releasePlayer()
        completionListener?.invoke() // Appeler le callback m√™me si arr√™t√© pr√©matur√©ment
        completionListener = null
    }

    private fun releasePlayer() {
        mediaPlayer?.apply {
            if (isPlaying) {
                stop()
            }
            release()
        }
        mediaPlayer = null
    }
}

// --- Fonctions utilitaires pour jouer les sons ---
fun playSoundForLetter(context: Context, letter: String, onComplete: () -> Unit = {}) {
    adlamAudioMap[letter]?.let { soundResourceId ->
        MediaPlayerSingleton.playSound(context, soundResourceId, onComplete)
    } ?: onComplete() // Appeler complete imm√©diatement si aucune ressource sonore
}

fun playSoundForExampleWord(context: Context, word: String, onComplete: () -> Unit = {}) {
    // Utilise la map des mots d'exemple avec son_nul comme placeholder
    exampleWordAudioMap[word]?.let { soundResourceId ->
        MediaPlayerSingleton.playSound(context, soundResourceId, onComplete)
    } ?: onComplete() // Appeler complete imm√©diatement si aucune ressource sonore (ou si son_nul = 0)
}


@OptIn(ExperimentalMaterial3Api::class, ExperimentalAnimationApi::class)
@Composable
fun DetailAlphabetScreen(
    letter: String,
    navController: NavController,
    alphabetList: List<String> = adlamAlphabet
) {
    var currentIndex by remember { mutableStateOf(alphabetList.indexOf(letter).coerceAtLeast(0)) } // Ensure index is valid
    val context = LocalContext.current
    val view = LocalView.current // Pour le feedback haptique
    var showDialog by remember { mutableStateOf(false) }

    // √âtat pour suivre si l'audio de la lettre est en cours de lecture
    var isPlayingLetterAudio by remember { mutableStateOf(false) }

    // Jouer le son de la lettre courante quand l'index change
    LaunchedEffect(key1 = currentIndex) {
        // Arr√™ter tout son en cours avant de jouer le nouveau
        MediaPlayerSingleton.stopSound()
        isPlayingLetterAudio = true
        playSoundForLetter(context, alphabetList[currentIndex]) {
            isPlayingLetterAudio = false // Mettre √† jour l'√©tat √† la fin de la lecture
        }
    }

    Scaffold(
        topBar = { DetailTopBar(navController, onInfoClick = { showDialog = true }) },
        content = { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(bottom = 50.dp) // Laisser de l'espace pour la banni√®re
                        .align(Alignment.TopCenter),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Spacer(modifier = Modifier.height(8.dp))

                    // --- Indicateur de position ---
                    Text(
                        text = "${currentIndex + 1} / ${alphabetList.size}",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                    Spacer(modifier = Modifier.height(8.dp))


                    // --- Contenu principal (Lettre + Exemples) avec swipe ---
                    Box(
                        modifier = Modifier
                            .weight(1f) // Prend l'espace restant
                            .fillMaxWidth()
                            .pointerInput(Unit) {
                                detectHorizontalDragGestures { change, dragAmount ->
                                    change.consume()
                                    val newIndex = when {
                                        dragAmount > 0 && currentIndex > 0 -> currentIndex - 1
                                        dragAmount < 0 && currentIndex < alphabetList.size - 1 -> currentIndex + 1
                                        else -> currentIndex // Pas de changement ou limite atteinte
                                    }

                                    if (newIndex != currentIndex) {
                                        // Feedback haptique
                                        view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
                                        // Arr√™ter le son pr√©c√©dent et mettre √† jour l'index
                                        MediaPlayerSingleton.stopSound()
                                        currentIndex = newIndex
                                        // Le LaunchedEffect g√©rera la lecture du son pour le nouvel index
                                    }
                                }
                            }
                    ) {
                        // --- Animation de transition entre les caract√®res ---
                        AnimatedContent(
                            targetState = currentIndex,
                            transitionSpec = {
                                // D√©termine la direction de l'animation bas√©e sur le changement d'index
                                if (targetState > initialState) {
                                    slideInHorizontally { width -> width } + fadeIn() with
                                            slideOutHorizontally { width -> -width } + fadeOut()
                                } else {
                                    slideInHorizontally { width -> -width } + fadeIn() with
                                            slideOutHorizontally { width -> width } + fadeOut()
                                }.using(SizeTransform(clip = false)) // Important pour que le texte ne soit pas coup√© pendant la transition
                            }
                        ) { targetIndex ->
                            // --- Contenu de chaque "page" de caract√®re ---
                            Column(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .verticalScroll(rememberScrollState()), // Permet le d√©filement si le contenu est trop long
                                horizontalAlignment = Alignment.CenterHorizontally,
                                verticalArrangement = Arrangement.spacedBy(16.dp) // Espacement entre les √©l√©ments
                            ) {
                                // --- Affichage de la Lettre + Bouton Play ---
                                Row(
                                    verticalAlignment = Alignment.CenterVertically,
                                    horizontalArrangement = Arrangement.Center,
                                    modifier = Modifier.padding(horizontal = 16.dp) // Padding autour de la ligne
                                ) {
                                    DisplayLetters(alphabetList, targetIndex) // Affiche les caract√®res
                                    Spacer(modifier = Modifier.width(8.dp)) // Espace entre lettre et bouton

                                    // Bouton Play d√©di√© pour la lettre
                                    IconButton(
                                        onClick = {
                                            MediaPlayerSingleton.stopSound() // Arr√™te tout son en cours
                                            isPlayingLetterAudio = true // Indique que la lecture commence
                                            playSoundForLetter(context, alphabetList[targetIndex]) {
                                                isPlayingLetterAudio = false // Indique que la lecture est termin√©e
                                            }
                                        },
                                        modifier = Modifier.size(48.dp) // Taille du bouton
                                    ) {
                                        // --- Utilisation des ic√¥nes Material Design STANDARD ---
                                        Icon(
                                            imageVector = if (isPlayingLetterAudio) Icons.Default.GraphicEq // Ic√¥ne quand l'audio joue (barres d'√©galiseur)
                                            else Icons.Default.PlayArrow, // Ic√¥ne quand l'audio ne joue pas (fl√®che play)
                                            contentDescription = stringResource(R.string.play_sound), // Utiliser votre string resource
                                            tint = MaterialTheme.colorScheme.primary // Couleur du bouton
                                        )
                                        // --- Fin de l'utilisation des ic√¥nes Material Design ---
                                    }
                                }

                                // --- Affichage des Exemples ---
                                DisplayExamples(targetIndex, alphabetList, context) // Passez le contexte aux exemples
                                Spacer(modifier = Modifier.height(16.dp)) // Espacement avant les boutons de navigation (si le scroll ne g√®re pas √ßa)
                            }
                        }
                    }

                    // --- Boutons de Navigation ---
                    NavigationButtons(currentIndex, alphabetList.size) { newIndex ->
                        // Feedback haptique
                        view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
                        // Arr√™ter le son avant de changer de lettre
                        MediaPlayerSingleton.stopSound()
                        currentIndex = newIndex
                        // Le LaunchedEffect g√©rera la lecture du son pour le nouvel index
                    }
                    Spacer(modifier = Modifier.height(16.dp))
                }

                // --- Banni√®re publicitaire align√©e en bas ---
                BannerAdView(
                    modifier = Modifier
                        .fillMaxWidth()
                        .align(Alignment.BottomCenter)
                )
            }
        }
    )

    // --- Bo√Æte de dialogue des r√®gles de lecture ---
    if (showDialog) {
        ReadingRulesDialog(onDismiss = { showDialog = false })
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DetailTopBar(navController: NavController, onInfoClick: () -> Unit) {
    TopAppBar(
        title = { Text(text = stringResource(R.string.letter_details)) },
        navigationIcon = {
            IconButton(onClick = {
                // Optionnel: arr√™ter le son en cours quand on quitte l'√©cran
                MediaPlayerSingleton.stopSound()
                navController.navigateUp()
            }) {
                Icon(
                    // Garde cette ic√¥ne si elle est un drawable personnalis√© que vous avez
                    // Sinon, utilisez Icons.Default.ArrowBack ou similaire
                    painter = painterResource(id = R.drawable.ic_arrow_back),
                    contentDescription = stringResource(R.string.back)
                )
            }
        },
        actions = {
            IconButton(onClick = onInfoClick) {
                Icon(
                    // Garde cette ic√¥ne si elle est un drawable personnalis√© que vous avez
                    // Sinon, utilisez Icons.Default.Info ou similaire
                    painter = painterResource(id = R.drawable.info),
                    contentDescription = stringResource(R.string.info)
                )
            }
        },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer,
            titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
            navigationIconContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
            actionIconContentColor = MaterialTheme.colorScheme.onPrimaryContainer
        )
    )
}

@Composable
fun DisplayLetters(alphabetList: List<String>, currentIndex: Int) {
    val currentLetter = alphabetList[currentIndex]
    // G√©rer les caract√®res combin√©s qui n'ont pas de version minuscule simple dans le map
    val lowerCaseLetter = when (currentLetter) {
        "û§êû§Å" -> "û§≤û§£"
        "û§êû§Ñ" -> "û§≤û§¶"
        "û§êû§î" -> "û§≤û§∂"
        "û§êû§ò" -> "û§≤û§∫"
        else -> currentLetter.lowercase(Locale.ROOT)
    }
    val latinEquivalent = adlamToLatinMap[currentLetter] ?: "?"

    Card(
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer),
        shape = RoundedCornerShape(16.dp),
//        modifier = Modifier.weight(1f) // Permet au Card de prendre l'espace restant dans le Row
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center,
            modifier = Modifier.padding(24.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center
            ) {
                Text(
                    text = currentLetter,
                    fontSize = 100.sp,
                    style = MaterialTheme.typography.displayLarge.copy(
                        shadow = Shadow(
                            color = Color.Gray,
                            offset = Offset(2f, 2f),
                            blurRadius = 8f
                        )
                    ),
                    color = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(end = 8.dp)
                )

                Text(
                    text = "-",
                    fontSize = 50.sp,
                    modifier = Modifier.alpha(0.7f)
                )
                Text(
                    text = lowerCaseLetter,
                    fontSize = 80.sp,
                    style = MaterialTheme.typography.displayLarge.copy(
                        shadow = Shadow(
                            color = Color.Gray,
                            offset = Offset(2f, 2f),
                            blurRadius = 8f
                        )
                    ),
                    color = MaterialTheme.colorScheme.primary,
                )
            }
            Text(
                text = latinEquivalent,
                fontSize = 24.sp,
                style = MaterialTheme.typography.bodyLarge.copy(
                    shadow = Shadow(
                        color = Color.Gray,
                        offset = Offset(1f, 1f),
                        blurRadius = 2f
                    )
                ),
                color = MaterialTheme.colorScheme.secondary,
                modifier = Modifier.padding(top = 8.dp)
            )
        }
    }
}

@Composable
fun DisplayExamples(currentIndex: Int, alphabetList: List<String>, context: Context) {
    val currentLetter = alphabetList[currentIndex]
    val vowels = listOf("û§Ä", "û§â", "û§ã", "û§å", "û§ì") // Liste des voyelles Adlam majuscules
    val lowercaseVowels = vowels.map { it.lowercase(Locale.ROOT) } // Convertir en minuscules

    Card(
        modifier = Modifier
            .padding(horizontal = 16.dp)
            .fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
    ) {
        Column(
            modifier = Modifier
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = stringResource(R.string.examples),
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            exampleWordsMap[currentLetter]?.forEach { example ->
                val formattedExample = buildAnnotatedString {
                    example.forEach { char ->
                        when {
                            // Mettre en surbrillance le caract√®re principal (majuscule ou minuscule)
                            char.toString() == currentLetter || char.toString() == currentLetter.lowercase(Locale.ROOT) -> {
                                withStyle(style = SpanStyle(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold)) {
                                    append(char)
                                }
                            }
                            // Mettre en surbrillance les voyelles (majuscules ou minuscules)
                            char.toString() in vowels || char.toString() in lowercaseVowels -> {
                                withStyle(style = SpanStyle(color = MaterialTheme.colorScheme.secondary)) {
                                    append(char)
                                }
                            }
                            else -> {
                                withStyle(style = SpanStyle(color = MaterialTheme.colorScheme.onSurface)) {
                                    append(char)
                                }
                            }
                        }
                    }
                }
                // --- Ligne pour le mot d'exemple et son bouton Play ---
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween, // Espace entre texte et bouton
                    modifier = Modifier.fillMaxWidth() // Remplir la largeur disponible
                ) {
                    Text(
                        text = formattedExample,
                        style = MaterialTheme.typography.bodyLarge,
                        modifier = Modifier
                            .padding(4.dp)
                            .weight(1f) // Permet au texte de prendre le maximum d'espace
                            .wrapContentWidth(Alignment.Start), // Aligner le texte √† gauche si l'espace le permet
                        fontSize = 30.sp
                    )
                    // Bouton Play pour le mot d'exemple
                    IconButton(
                        onClick = {
                            MediaPlayerSingleton.stopSound() // Arr√™te tout son en cours (lettre ou autre exemple)
                            playSoundForExampleWord(context, example)
                        },
                        modifier = Modifier.size(36.dp) // Taille du bouton
                    ) {
                        // --- Utilisation d'une ic√¥ne Material Design STANDARD ---
                        Icon(
                            imageVector = Icons.Default.PlayArrow, // Ic√¥ne standard pour jouer
                            contentDescription = stringResource(R.string.play_example), // Utiliser votre string resource
                            tint = MaterialTheme.colorScheme.secondary // Couleur du bouton (peut-√™tre diff√©rente de l'ic√¥ne de la lettre)
                        )
                        // --- Fin de l'utilisation de l'ic√¥ne Material Design ---
                    }
                }
            }
        }
    }
}


@Composable
fun NavigationButtons(
    currentIndex: Int,
    alphabetSize: Int,
    onLetterChange: (Int) -> Unit
) {
    val view = LocalView.current // Pour le feedback haptique

    Row(
        horizontalArrangement = Arrangement.spacedBy(8.dp), // Espacement entre les boutons
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp)
    ) {
        Button(
            onClick = {
                if (currentIndex > 0) {
                    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
                    onLetterChange(currentIndex - 1)
                }
            },
            enabled = currentIndex > 0,
            modifier = Modifier.weight(1f)
        ) {
            Text(stringResource(R.string.previous))
        }
        Button(
            onClick = {
                if (currentIndex < alphabetSize - 1) {
                    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
                    onLetterChange(currentIndex + 1)
                }
            },
            enabled = currentIndex < alphabetSize - 1,
            modifier = Modifier.weight(1f)
        ) {
            Text(stringResource(R.string.next))
        }
    }
}

@Composable
fun ReadingRulesDialog(onDismiss: () -> Unit) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(stringResource(R.string.reading_rules_title)) },
        text = {
            // Rendre le texte d√©filable si n√©cessaire
            Text(
                text = stringResource(R.string.reading_rules_text),
                modifier = Modifier.verticalScroll(rememberScrollState())
            )
        },
        confirmButton = {
            Button(onClick = onDismiss) {
                Text(stringResource(R.string.ok))
            }
        }
    )
}

@Preview(
    uiMode = Configuration.UI_MODE_NIGHT_YES,
    name = "DefaultPreviewDark"
)
@Preview(
    uiMode = Configuration.UI_MODE_NIGHT_NO,
    name = "DefaultPreviewLight"
)
@Composable
fun DetailAlphabetScreenPreview() {
    val navController = rememberNavController()
    AdlamFulfuldeTheme {
        DetailAlphabetScreen(letter = adlamAlphabet.first(), navController = navController)
    }
}